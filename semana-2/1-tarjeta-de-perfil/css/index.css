/* Definimos las variables de css en el root. 
La Pseudoclase :root de CSS selecciona el 
elemento raíz de un árbol que representa el 
documento. En HTML, :root representa el elemento <html>
 y es idéntico al selector html, excepto que su especificidad es mayor. 

 Nota:
:root puede ser útil para declarar variables CSS globales: */
:root {
    scroll-behavior: smooth;
    --primary-theme-color: #20232a;
    --primary-shadow-color: #20232abf;
    --secondary-shadow-color: #282c34bf;
    --primary-text-color: #fff;
    --primary-highlight-color: #61dafb;
    --primary-font-family: monospace;
}

.body {
    background-color: var(--primary-shadow-color); /*Color del contenedor*/
    color: var(--primary-text-color); /*Color de texto*/
    font-family: var(--primary-font-family); /*Tipo de fuente*/
    margin: 0; /*Contenido sin margenes*/
    /**El valor none se utiliza para resetear propiedades de una etiqueta html**/
}
/* Hay etiquetas que ya tienen estilos predefinidos. */

/**display: flex; flexibiliza elementos**/
/**.element{
    display: flex;
}**/

.hero {
    /* display: flex; */
    display: flex;/*Junto con el margin:auto del card, ya que margin: auto
    toma el espacio en blanco y lo ordena.*/
    /* align-items: center;
    justify-content: center; */
    /*Asignar imagen al hero*/
    background-image: url('../img/fondo_tarjeta_perfil.webp');
    /**Quiero que no se deforme la imagen, ademas que no se repita**/
    background-size: cover;
    /**Quiero que este centrado la imagen**/
    background-position: center;
    /**Quiero q ocupe todo el alto**/
    min-height: 100vh; /*min-height: Especifica la altura minima del contenido
    - 16px == 1rem
    - Para el hero se necesita alturas relativas, pero en este ejemplo quiero q 
    ocupe la altura de mi ventana, el 100% es una opcion
    siempre y cuando la altura la tenga el padre. Ahora si quiero que la imagen
    ocupe todo el ancho uso: 100vh si quiero todo el ancho es 100vw.
    El 100vh hace que desaparezca el scroll y se adecue a la pantalla
    
    */
    /**Altura minima**/
    /****/
    /**width: 100%;**/
    /**centrar verticalmente**/
    /**align-items: center;**/
    /**centrar horizontalmente**/
    /* justify-content: center; */
    align-items: center;
}


/* .card {
    max-width: 256px;
    display: flex;
    flex-direction: column;
} */

.card {
    /* background-color: var(--primary-theme-color); */
    /* Borde de la tarjeta */
    border: 0.125rem solid var(--primary-text-color);
    border-radius: 1rem;
    max-width: 320px; /*Ancho maximo a la tarjeta de  360px*/
    margin: auto;/*Para que la tarjeta se centre dentro del articulo, ya que esta dejando
    un espacio se usa la propiedad margin auto que Divide el espacio que esta vacio lo divide en 2 y 
    lo pone a los costado del elemento (los espacios vacios)*/
    overflow: hidden; /*Como la imagen se esta saliendo, quiero ocultar lo que la imagen se sale de la carta,
    para eso uso la propiedad overflow: hidden */
    box-sizing: border-box;
}

/* La pseudoclase se basa en el estado del elemento */
.card:hover {
    border: 0.125rem solid var(--primary-highlight-color);
}



/*El Margin y Padding solo funcionan con elementos 
de block, no funciona con elementos inline */
.card__header {
    background-color: var(--primary-shadow-color);
    text-align: center; /*  centrar la imagen*/
    padding: 1rem; /*  */
}

/* Las imagenes son elementos INLINE */
.card__img {
    background-color: var(--primary-theme-color);
    
    border-radius: 50%;/*Para hacer la imagen circular*/
    /* Imagen Responsive */
    /* El 100% analiza y refiere el tamaño del padre */
    width: min(100%, 256px);/*min(100%, 256px) analiza el menor entre valores, El 100%
    hace referencia al padre.*/
    height: 256px;
    /* Truco para que la imagen no se deforme */
    object-fit: cover;
    /* Se puede mezclar block con inline display: inline-block*/
}

/* .menu {
    display: flex;
} */

.card__body {
    display: flex; /*Permite q cada box() se ponga uno a lado del otro*/
    /* Usar display:inline; es un problema en card__body ya que inline no trabaja como caja, en 
    todo caso se podria combinar display:inline-block; pero esto te da una
    separacion innecesaria */

    /* El display:flex; esto ya no se aplica a los elementos, se aplica a un contenedor
    Y sus hijos directos o adyacentes van a tener las propiedad de flex-items. Esto hace que
    se pongan en linea pero sin espacios raros como display:inline-block;. Esto organiza
    a los hijos para que ocupen el menor espacio disponible */

    /*Con el display:flex; si tengo una altura de 64px height:64px puedo usar
    align-items: flex-end; justify-content: flex-end y lo colocamos en la parte final 
    de la derecha. Esto se cumple solo cuando la direccion es fila flex-direction:row.
    Pero tambien se puede colocar en columna flex-direction:column;*/
    

    /** Acomoda a sus hijos en columnas**/
    /**Con esta propiedad lo ponemos en columna**/
    flex-direction: column;
   
    gap: 0.5rem;/*Agregamos espacio*/

    background-color: var(--secondary-shadow-color);
    padding: 1rem;/*Espacio q empuja hacia afuera*/
}


.card__title {
    font-size: 1.5rem;
    text-align: center;
    margin: 0; /*Resetea los estilos de margin a 0*/
}

.card__subtitle {
    font-size: 1.25rem;
    text-align: center;
    margin: 0; /*Resetea los estilos de margin a 0*/
}

.card__text {
    font-size: 1rem;
    text-align: center;
    margin: 0; /*Resetea los estilos de margin a 0*/
}

/* El pseudoelemento se basa en selecciona ro crear
elementos */
.card__text::before {
    content: '❤';
}

.card__text::after {
    content: '❤';
}

/* La propieda inline sola no trabaja como caja */

/* Display flex ya no se aplica a los elementos
si no se aplica a un contenedor, y sus hijos directos
o adyacentes van a tener esta propiedad de flex.

Para que los hijos ocupen el espacio minimo displonible

 */

/* 
.box-container{
    display: flex;
}

.box-element{
    border: 2px solid yellow;
    background-color: red;
    width:32px;
    height:32px;
}
*/


.card__footer {
    background-color: var(--primary-shadow-color);
    padding: 1rem;
}

.menu {
    /* Para poner los elementos en linea  usamos el display flex*/
    display: flex;
    /* Centrar los elementos */
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin: 0;
    padding: 0;
    list-style: none;
}

.menu__link {
    display: flex;
    color: var(--primary-text-color);
    font-size: 1.75rem;
}


.menu__link:hover {
    transform: scale(1.125);
}

@media (min-width: 768px) {
    .card {
      max-width: 512px;
    }
  
    .card__title {
      font-size: 1.75rem;
    }
  
    .card__subtitle {
      font-size: 1.5rem;
    }
  
    .card__text {
      font-size: 1.25rem;
    }
  
    .menu__link {
      font-size: 2rem;
    }
  }

  /* 100% referencia al padre */
  /* Color blanco #fff, white, rgb(255,255,255) */